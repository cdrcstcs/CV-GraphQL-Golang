// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Class struct {
	ID       string           `json:"_id"`
	Course   *Course          `json:"course"`
	Schedule []*ClassSchedule `json:"schedule"`
	Location *Room            `json:"location"`
	Students []*Student       `json:"students"`
}

type ClassSchedule struct {
	DayOfWeek string `json:"dayOfWeek"`
	StartTime string `json:"startTime"`
	EndTime   string `json:"endTime"`
}

type ContactInfo struct {
	Phone *string `json:"phone"`
	Email *string `json:"email"`
}

type Course struct {
	ID            string     `json:"_id"`
	Title         string     `json:"title"`
	Description   string     `json:"description"`
	Teacher       *Teacher   `json:"teacher"`
	Students      []*Student `json:"students"`
	Classes       []*Class   `json:"classes"`
	Prerequisites []*Course  `json:"prerequisites"`
}

type CreateClassInput struct {
	CourseID string                      `json:"courseId"`
	Schedule []*CreateClassScheduleInput `json:"schedule"`
	Location *CreateRoomInput            `json:"location"`
}

type CreateClassScheduleInput struct {
	DayOfWeek string `json:"dayOfWeek"`
	StartTime string `json:"startTime"`
	EndTime   string `json:"endTime"`
}

type CreateContactInfoInput struct {
	Phone *string `json:"phone"`
	Email *string `json:"email"`
}

type CreateCourseInput struct {
	Title         string   `json:"title"`
	Description   string   `json:"description"`
	TeacherID     string   `json:"teacherId"`
	Prerequisites []string `json:"prerequisites"`
}

type CreateGradeInput struct {
	CourseID    string  `json:"courseId"`
	StudentID   string  `json:"studentId"`
	Score       float64 `json:"score"`
	GradeLetter string  `json:"gradeLetter"`
	Comments    *string `json:"comments"`
}

type CreateGuardianInput struct {
	Name         string                  `json:"name"`
	Relationship string                  `json:"relationship"`
	ContactInfo  *CreateContactInfoInput `json:"contactInfo"`
}

type CreateRoomInput struct {
	Building   string `json:"building"`
	RoomNumber string `json:"roomNumber"`
}

type CreateStudentInput struct {
	FirstName        string                 `json:"firstName"`
	LastName         string                 `json:"lastName"`
	Email            string                 `json:"email"`
	Birthdate        string                 `json:"birthdate"`
	EnrollmentStatus EnrollmentStatus       `json:"enrollmentStatus"`
	Guardians        []*CreateGuardianInput `json:"guardians"`
}

type CreateTeacherInput struct {
	FirstName   string   `json:"firstName"`
	LastName    string   `json:"lastName"`
	Email       string   `json:"email"`
	OfficeHours string   `json:"officeHours"`
	Subjects    []string `json:"subjects"`
}

type CreateUserInput struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Roles    []Role `json:"roles"`
}

type DeleteClassResponse struct {
	DeletedClassID string `json:"deletedClassId"`
}

type DeleteCourseResponse struct {
	DeletedCourseID string `json:"deletedCourseId"`
}

type DeleteGradeResponse struct {
	DeletedGradeID string `json:"deletedGradeId"`
}

type DeleteGuardianResponse struct {
	DeletedGuardianID string `json:"deletedGuardianId"`
}

type DeleteStudentResponse struct {
	DeletedStudentID string `json:"deletedStudentId"`
}

type DeleteTeacherResponse struct {
	DeletedTeacherID string `json:"deletedTeacherId"`
}

type DeleteUserResponse struct {
	DeletedUserID string `json:"deletedUserId"`
}

type Grade struct {
	ID          string   `json:"_id"`
	Course      *Course  `json:"course"`
	Student     *Student `json:"student"`
	Score       float64  `json:"score"`
	GradeLetter string   `json:"gradeLetter"`
	Comments    *string  `json:"comments"`
}

type Guardian struct {
	ID           string       `json:"_id"`
	Name         string       `json:"name"`
	Relationship string       `json:"relationship"`
	ContactInfo  *ContactInfo `json:"contactInfo"`
}

type Room struct {
	ID         string `json:"_id"`
	Building   string `json:"building"`
	RoomNumber string `json:"roomNumber"`
}

type Student struct {
	ID               string           `json:"_id"`
	FirstName        string           `json:"firstName"`
	LastName         string           `json:"lastName"`
	Email            string           `json:"email"`
	Birthdate        string           `json:"birthdate"`
	EnrollmentStatus EnrollmentStatus `json:"enrollmentStatus"`
	Guardians        []*Guardian      `json:"guardians"`
	EnrolledCourses  []*Course        `json:"enrolledCourses"`
	Grades           []*Grade         `json:"grades"`
}

type Subject struct {
	ID   string `json:"_id"`
	Name string `json:"name"`
}

type Teacher struct {
	ID          string     `json:"_id"`
	FirstName   string     `json:"firstName"`
	LastName    string     `json:"lastName"`
	Email       string     `json:"email"`
	OfficeHours string     `json:"officeHours"`
	Subjects    []*Subject `json:"subjects"`
	Courses     []*Course  `json:"courses"`
}

type UpdateClassInput struct {
	Schedule []*CreateClassScheduleInput `json:"schedule"`
	Location *CreateRoomInput            `json:"location"`
}

type UpdateCourseInput struct {
	Title         *string  `json:"title"`
	Description   *string  `json:"description"`
	TeacherID     *string  `json:"teacherId"`
	Prerequisites []string `json:"prerequisites"`
}

type UpdateGradeInput struct {
	Score       *float64 `json:"score"`
	GradeLetter *string  `json:"gradeLetter"`
	Comments    *string  `json:"comments"`
}

type UpdateGuardianInput struct {
	Name         *string                 `json:"name"`
	Relationship *string                 `json:"relationship"`
	ContactInfo  *CreateContactInfoInput `json:"contactInfo"`
}

type UpdateStudentInput struct {
	FirstName        *string                `json:"firstName"`
	LastName         *string                `json:"lastName"`
	Email            *string                `json:"email"`
	Birthdate        *string                `json:"birthdate"`
	EnrollmentStatus *EnrollmentStatus      `json:"enrollmentStatus"`
	Guardians        []*UpdateGuardianInput `json:"guardians"`
}

type UpdateTeacherInput struct {
	FirstName   *string  `json:"firstName"`
	LastName    *string  `json:"lastName"`
	Email       *string  `json:"email"`
	OfficeHours *string  `json:"officeHours"`
	Subjects    []string `json:"subjects"`
}

type UpdateUserInput struct {
	Username *string `json:"username"`
	Email    *string `json:"email"`
	Roles    []Role  `json:"roles"`
}

type User struct {
	ID       string `json:"_id"`
	Username string `json:"username"`
	Email    string `json:"email"`
	Roles    []Role `json:"roles"`
}

type EnrollmentStatus string

const (
	EnrollmentStatusEnrolled   EnrollmentStatus = "ENROLLED"
	EnrollmentStatusWaitlisted EnrollmentStatus = "WAITLISTED"
	EnrollmentStatusDropped    EnrollmentStatus = "DROPPED"
	EnrollmentStatusGraduated  EnrollmentStatus = "GRADUATED"
)

var AllEnrollmentStatus = []EnrollmentStatus{
	EnrollmentStatusEnrolled,
	EnrollmentStatusWaitlisted,
	EnrollmentStatusDropped,
	EnrollmentStatusGraduated,
}

func (e EnrollmentStatus) IsValid() bool {
	switch e {
	case EnrollmentStatusEnrolled, EnrollmentStatusWaitlisted, EnrollmentStatusDropped, EnrollmentStatusGraduated:
		return true
	}
	return false
}

func (e EnrollmentStatus) String() string {
	return string(e)
}

func (e *EnrollmentStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnrollmentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnrollmentStatus", str)
	}
	return nil
}

func (e EnrollmentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleAdmin   Role = "ADMIN"
	RoleTeacher Role = "TEACHER"
	RoleStudent Role = "STUDENT"
	RoleParent  Role = "PARENT"
)

var AllRole = []Role{
	RoleAdmin,
	RoleTeacher,
	RoleStudent,
	RoleParent,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleTeacher, RoleStudent, RoleParent:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
